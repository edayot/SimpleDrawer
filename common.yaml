data_pack:
  name: "{{ project_name }}-v{{ project_version }}-Datapack"
  description: "{{ project_description }}\n by {{ project_author }}, v{{ project_version }} - Datapack"
  load: .
  zipped: false

resource_pack:
  name: "{{ project_name }}-v{{ project_version }}-Resourcepack"
  description: "{{ project_description }}\n by {{ project_author }}, v{{ project_version }} - Resourcepack"
  load: .
  zipped: false

require:
  - smithed_libraries.plugins.companion_mod
  - smithed_libraries.plugins.misc.display_broadcasted_pack
  - smithed_libraries.plugins.manifest.collect_version

pipeline:
  - mecha
  - smithed_libraries.plugins.versioning
  - beet.contrib.find_replace
  - airdox_.dependency_injection
  - airdox_.add_license


  

meta:
  airdox_:
    include_path: "releases/included/"
    data_pack_merge: false
    resource_pack_merge: false
    license_path: "LICENSE"
  find_replace:
    substitute:
      - data_pack:
          match:
            functions: "{{ project_id }}:*"
        substitute:
          - find: "__version__"
            replace: "v{{ project_version }}"
  mecha:
    formatting: preserve

  smithed:
    versioning:
      # Either a list or single item of paths to schedule clocks
      #  Used to kill library ticking if a newer library exists in-world
      scheduled_paths: impl/tick

      # configures how the pack leverages LL to implement enumeration and resolution
      lantern_load:
        step: load                          # which LL step to start pack discovery
        tag_path: load                      # base path for tags needed for LL impl
        function_path: impl/test_load  # base path for functions needed for LL impl

      # configures how versions get injected into paths and folders
      #  ex: smithed.actionbar/impl/reset -> smithed.actionbar/impl/v1.2.3/reset
      # here, we need to specify `{{ ctx.project_id }}`
      refactor:
        match: "*:*"                  # which files to look at
        find: "{{ project_id }}:impl/"               # which paths to look for
        replace: "{{ project_id }}:v{{ version }}/"  # what to replace path w/

      # configures how APIs get generated and version checked
      # this occurs **after** refactoring!
      #  any API with `# @public` on the first line generates the following:
      #   - function tag: "{{ namespace }}:{{ tag_path }}/{{ path_to_file }}"
      #   - version check: "{{ namespace }}:{{ version_check_path }}/{{ path_to_file}}"
      api:
        match: "{{ project_id }}:v{{ version }}"                   # match only implemented apis
        implementation_prefix: "{{ project_id }}:v{{ version }}/"  # which files match the internal path
        version_check_path: "v{{ version }}/calls"        # base path for version_checks
        tag_path: "_useless"                                               # base path for API tags
